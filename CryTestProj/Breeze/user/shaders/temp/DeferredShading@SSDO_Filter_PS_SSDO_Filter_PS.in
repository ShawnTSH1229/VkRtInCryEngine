/*
BgAAAHBzXzZfMAAADgAAAFNTRE9fRmlsdGVyX1BTAAACBBAAAABAQBAAAABAQRAAAACAQBAAAACAQQEQAAAAAEDMzMwAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4 SSDO_SourceTexSize;
  float4 SSDO_BlurKernel;
  float4 SSDO_BlurOffset;
};
SamplerState SSDOFiltSamplerSSpec:register(s2, space0);
SamplerState SSDOFiltSamplerLDpth:register(s3, space0);
Texture2D<float4>SSDOFiltSSpec:register(t0, space0);
Texture2D<float4>SSDOFiltLDpth:register(t1, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
cbuffer CBDeferredDecal:register(b0, space1)
{
  struct
  {
    float4x4 matVolumeProj;
    float4x4 matInvVolumeProj;
    float4x4 matDecalTS;
    float4 textureRect[2];
    float4 diffuseCol;
    float4 specularCol;
    float4 mipLevels;
    float4 generalParams;
    float4 opacityParams;
  }
  cbDecal;
};
cbuffer CBSSDO:register(b0, space1)
{
  struct SSDOConstants
  {
    float4 screenSize;
    float4 nearFarClipDist;
    float4 viewSpaceParams;
    float4 ssdoParams;
    float4 hmaoParams;
  }
  cbSSDO;
};
pixout SSDO_Filter_PS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  half2 addr0=floor(IN.baseTC.xy*SSDO_SourceTexSize.xy)*SSDO_BlurOffset.zw;
  half2 addr1=addr0+SSDO_BlurKernel.xy;
  half2 addr2=addr0+SSDO_BlurKernel.yz;
  half2 addr3=addr2+SSDO_BlurKernel.xy;
  half4 value0=GetTexture2D(SSDOFiltSSpec,SSDOFiltSamplerSSpec,float4(addr0,0,0));
  half4 value1=GetTexture2D(SSDOFiltSSpec,SSDOFiltSamplerSSpec,float4(addr1,0,0));
  half4 value2=GetTexture2D(SSDOFiltSSpec,SSDOFiltSamplerSSpec,float4(addr2,0,0));
  half4 value3=GetTexture2D(SSDOFiltSSpec,SSDOFiltSamplerSSpec,float4(addr3,0,0));
  const half4 vDepthAddrOffset=half4(1.h,1.h,-1.h,-1.h)*SSDO_BlurOffset.xyxy;
  half4 depth4;
  depth4.x=GetTexture2D(SSDOFiltLDpth,SSDOFiltSamplerLDpth,float4(addr0+vDepthAddrOffset.zw,0,0));
  depth4.y=GetTexture2D(SSDOFiltLDpth,SSDOFiltSamplerLDpth,float4(addr1+vDepthAddrOffset.xw,0,0));
  depth4.z=GetTexture2D(SSDOFiltLDpth,SSDOFiltSamplerLDpth,float4(addr2+vDepthAddrOffset.zy,0,0));
  depth4.w=GetTexture2D(SSDOFiltLDpth,SSDOFiltSamplerLDpth,float4(addr3+vDepthAddrOffset.xy,0,0));
  half centerDepth=GetTexture2D(SSDOFiltLDpth,SSDOFiltSamplerLDpth,float4(IN.baseTC.xy,0,0));
  half4 weight4=saturate(1.h-35.h*abs(depth4/centerDepth-1.h));
  half totalWeight=dot(weight4,1.h);
  weight4/=totalWeight;
  OUT.Color=(value0+value1+value2+value3)*0.25h;
  if(totalWeight>0.01h)OUT.Color=weight4.x*value0+weight4.y*value1+weight4.z*value2+weight4.w*value3;
  return OUT;
}