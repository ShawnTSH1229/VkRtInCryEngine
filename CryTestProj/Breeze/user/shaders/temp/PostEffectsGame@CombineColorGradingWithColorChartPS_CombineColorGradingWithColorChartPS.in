/*
BgAAAHBzXzZfMAAAIwAAAENvbWJpbmVDb2xvckdyYWRpbmdXaXRoQ29sb3JDaGFydFBTAAICEAAAAEBAEAAAAIBAARAAAAAAQMzMzAAAAAAAAAAA
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4 ColorGradingParams3;
  float4 ColorGradingParams2;
  float4 ColorGradingParams4;
  float4 mColorGradingMatrix[3];
  float4 ColorGradingParams0;
  float4 ColorGradingParams1;
};
SamplerState mergedChartSampler:register(s1, space0);
Texture2D mergedChartTex:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half3 GetLuminanceWeights()
{
  return half3(0.2126h,0.7152h,0.0722h);
}
half GetLuminance(half3 color)
{
  return dot(color,GetLuminanceWeights());
}
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
void TexColorChart2D(in Texture2D chartTex,in SamplerState chartSampler,inout half3 cImage)
{
  const float chartDim=16.0;
  const float3 scale=float3(chartDim-1.0,chartDim-1.0,chartDim-1.0)/chartDim;
  const float3 bias=float3(0.5,0.5,0.0)/chartDim;
  float3 lookup=saturate(cImage)*scale+bias;
  float slice=lookup.z*chartDim;
  float sliceFrac=frac(slice);
  float sliceIdx=slice-sliceFrac;
  lookup.x=(lookup.x+sliceIdx)/chartDim;
  float3 col0=GetTexture2D(chartTex,chartSampler,lookup.xy);
  lookup.x+=1.0/chartDim;
  float3 col1=GetTexture2D(chartTex,chartSampler,lookup.xy);
  cImage=col0+(col1-col0)*sliceFrac;
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
void AdjustLevels(inout half3 cImage)
{
  half fMinInput=ColorGradingParams0.x;
  half fGammaInput=1.0/ColorGradingParams0.y;
  half fMaxInput=ColorGradingParams0.z;
  half fMinOutput=ColorGradingParams0.w;
  half fMaxOutput=ColorGradingParams1.x;
  cImage.xyz=pow(max((cImage.xyz*255.0f-fMinInput)/(fMaxInput-fMinInput),0.0f),fGammaInput);
  cImage.xyz*=(fMaxOutput-fMinOutput);
  cImage.xyz+=fMinOutput;
  cImage.xyz/=255.0;
}
void ApplyPhotoFilter(inout half4 cImage)
{
  half3 cFilterColor=ColorGradingParams2.xyz;
  half fFilterColorDensity=ColorGradingParams2.w;
  half fLum=GetLuminance(cImage.xyz);
  half3 cMin=0;
  half3 cMed=cFilterColor;
  half3 cMax=1.0;
  half3 cColor=lerp(cMin,cMed,saturate(fLum*2.0));
  cColor=lerp(cColor,cMax,saturate(fLum-0.5)*2.0);
  cImage.xyz=lerp(cImage.xyz,cColor.xyz,saturate(fLum*fFilterColorDensity));
}
void AdjustColor(inout half4 cImage)
{
  cImage.xyz=half3(dot(cImage,mColorGradingMatrix[0]),dot(cImage,mColorGradingMatrix[1]),dot(cImage,mColorGradingMatrix[2]));
  ;
}
half4 RGBtoCMYK(float3 rgb)
{
  half4 cmyk=0.0;
  cmyk.xyz=1.0-rgb;
  cmyk.w=saturate(min(min(cmyk.x,cmyk.y),cmyk.z));
  cmyk.xyz=saturate((cmyk.xyz-cmyk.w)/(1.0-cmyk.w));
  return cmyk;
}
float3 CMYKtoRGB(float4 cmyk)
{
  half3 rgb=0.0;
  rgb=1.0-min(1.0,cmyk.xyz*(1.0-cmyk.w)+cmyk.w);
  return rgb;
}
void SelectiveColor(inout half3 cImage)
{
  half fColorPickRange=saturate(1-length(cImage.xyz-ColorGradingParams3.xyz));
  half4 cmyk=RGBtoCMYK(cImage.xyz);
  cmyk=lerp(cmyk,clamp(cmyk+ColorGradingParams4,-1,1),fColorPickRange);
  cImage=lerp(cImage,CMYKtoRGB(cmyk),fColorPickRange);
}
struct v2f_cch
{
  float4 HPosition:SV_POSITION;
  float2 baseTC:TEXCOORD0;
  float3 Color:TEXCOORD1;
};
pixout CombineColorGradingWithColorChartPS(v2f_cch IN)
{
  pixout OUT;
  half4 col=half4(IN.Color,1.h);
  AdjustLevels(col.xyz);
  AdjustColor(col);
  TexColorChart2D(mergedChartTex,mergedChartSampler,col.xyz);
  OUT.Color=col;
  return OUT;
}