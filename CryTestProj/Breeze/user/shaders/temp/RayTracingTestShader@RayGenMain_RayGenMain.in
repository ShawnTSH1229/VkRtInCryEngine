/*
BwAAAGxpYl82XzMACgAAAFJheUdlbk1haW4AAAEDHA0AAEBAHA0AAEBBHA0AAMBCAAAAAAAAAAA=
*/

struct FBasicRayData
{
  float3 Origin;
  uint Mask;
  float3 Direction;
  float TFar;
};
struct FDefaultPayload
{
  float HitT;
  uint PrimitiveIndex;
  uint InstanceIndex;
  float2 Barycentrics;
  uint InstanceID;
};
RaytracingAccelerationStructure tlas:register(t0);
StructuredBuffer<FBasicRayData>Rays:register(t1);
RWStructuredBuffer<uint>OcclusionOutput:register(u2);
[shader("raygeneration")]void RayGenMain()
{
  const uint RayIndex=DispatchRaysIndex().x;
  FBasicRayData InputRay=Rays[RayIndex];
  RayDesc Ray;
  Ray.Origin=InputRay.Origin;
  Ray.Direction=InputRay.Direction;
  Ray.TMin=0.0f;
  Ray.TMax=InputRay.TFar;
  uint RayFlags=RAY_FLAG_FORCE_OPAQUE;
  const uint InstanceInclusionMask=0x01;
  FDefaultPayload Payload=(FDefaultPayload)0;
  TraceRay(tlas,RayFlags,InstanceInclusionMask,0,2,0,Ray,Payload);
  OcclusionOutput[RayIndex]=(Payload.HitT>0)?1:0;
}