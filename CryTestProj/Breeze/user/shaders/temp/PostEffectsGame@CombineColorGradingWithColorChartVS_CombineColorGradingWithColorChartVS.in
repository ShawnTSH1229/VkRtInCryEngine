/*
BgAAAHZzXzZfMAAAIwAAAENvbWJpbmVDb2xvckdyYWRpbmdXaXRoQ29sb3JDaGFydFZTAAICEAAAAEBAEAAAAIBAARAAAAAAQMzMzAAAAAAAAAAA
*/

cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
float4 GetInputColor(in float4 Color)
{
  return Color.zyxw;
}
struct a2v_cch
{
  float4 Position:POSITION;
  float2 baseTC:TEXCOORD0;
  float4 Color:COLOR;
};
struct v2f_cch
{
  float4 HPosition:SV_POSITION;
  float2 baseTC:TEXCOORD0;
  float3 Color:TEXCOORD1;
};
v2f_cch CombineColorGradingWithColorChartVS(a2v_cch IN)
{
  v2f_cch OUT=(v2f_cch)0;
  OUT.baseTC=IN.baseTC;
  OUT.Color=GetInputColor(IN.Color);
  OUT.HPosition.xy=IN.Position.xy*float2(2.f,-2.f)-float2(1.f,-1.f);
  OUT.HPosition.zw=float2(0.f,1.f);
  const float chartDim=16.0;
  half3 scale=chartDim/(chartDim-1);
  half3 bias=0.5/(chartDim-1);
  OUT.Color.rg=OUT.Color.rg*scale-bias;
  return OUT;
}