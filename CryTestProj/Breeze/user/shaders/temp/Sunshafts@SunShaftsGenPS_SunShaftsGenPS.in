/*
BgAAAHBzXzZfMAAADgAAAFN1blNoYWZ0c0dlblBTAAADAhAAAABAQBAAAACAQAEQAAAAAEABEQAAAABGAAAAAAAAAAA=
*/

SamplerState SSHFTG_LCSampler:register(s1, space0);
Texture2D<float4>SSHFTG_Target:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b0, space2)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
float2 GetScaledScreenTC(float2 TC)
{
  return TC*CV_HPosScale;
}
float2 MapViewportToRaster(float2 normalizedViewportPos,bool bOtherEye=false)
{
  return normalizedViewportPos;
}
cbuffer CBSunShafts:register(b0, space1)
{
  struct
  {
    float4 sunPos;
    float4 params;
  }
  cbSunShafts;
};
struct vtxOutSunShaftsGen
{
  float4 HPosition:SV_POSITION;
  float2 baseTC:TEXCOORD0;
};
pixout SunShaftsGenPS(vtxOutSunShaftsGen IN)
{
  pixout OUT;
  float2 sunPosProj=cbSunShafts.sunPos.xy;
  float fSign=cbSunShafts.sunPos.w;
  float2 sunVec=(GetScaledScreenTC(sunPosProj.xy)-IN.baseTC.xy)/CV_HPosScale.xy;
  float fAspectRatio=1.333*(CV_ScreenSize.y*CV_HPosScale.x)/(CV_ScreenSize.x*CV_HPosScale.y);
  float sunDist=saturate(fSign)*saturate(1-saturate(length(sunVec*float2(1,fAspectRatio))*cbSunShafts.params.y));
  float2 sunDir=(GetScaledScreenTC(sunPosProj.xy)-IN.baseTC.xy);
  half4 accum=0;
  sunDir.xy*=cbSunShafts.params.x*(fSign);
  half4 depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy));
  accum+=depth;
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*1.0));
  accum+=depth*(1.0-1.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*2.0));
  accum+=depth*(1.0-2.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*3.0));
  accum+=depth*(1.0-3.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*4.0));
  accum+=depth*(1.0-4.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*5.0));
  accum+=depth*(1.0-5.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*6.0));
  accum+=depth*(1.0-6.0/8.0);
  depth=GetTexture2D(SSHFTG_Target,SSHFTG_LCSampler,MapViewportToRaster(IN.baseTC.xy+sunDir.xy*7.0));
  accum+=depth*(1.0-7.0/8.0);
  accum/=8.0;
  OUT.Color=accum*2*float4(sunDist.xxx,1);
  OUT.Color.w+=1.0-saturate(saturate(fSign*0.1+0.9));
  return OUT;
}