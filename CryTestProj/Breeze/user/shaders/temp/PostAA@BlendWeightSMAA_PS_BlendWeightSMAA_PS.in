/*
BgAAAHBzXzZfMAAAEgAAAEJsZW5kV2VpZ2h0U01BQV9QUwAAAgUQAAAAQEAQAAAAQEEQAAAAQEIQAAAAgEAQAAAAgEEBEAAAAABAzAAAAAAAAAAA
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4 PS_ScreenSize;
};
SamplerState BlndWgtSMAA_EdSampler:register(s4, space0);
SamplerState BlndWgtSMAA_SrSampler:register(s3, space0);
Texture2D<float4>BlndWgtSMAA_Area:register(t1, space0);
Texture2D<float2>BlndWgtSMAA_Edge:register(t0, space0);
Texture2D<float4>BlndWgtSMAA_Srch:register(t2, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half2 GetTexture2DLod(Texture2D<float2>tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float2 uv,float Lod)
{
  return tex.SampleLevel(samplerState,uv.xy,Lod);
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
cbuffer CBPostAA:register(b0, space1)
{
  struct TemporalAAConstants
  {
    float4x4 matReprojection;
    float4 params;
    float4 screenSize;
  }
  cbPostAA;
};
min16int SMAASearchDiag1(Texture2D<float2>edgesTex,min16int2 vPixCoord,min16int2 dir,bool c)
{
  min16int2 offset=dir;
  float2 e=0;
  min16int i=0;
  for(i=0;
  i<0;
  i++)
  {
    e.rg=edgesTex.Load(int3(vPixCoord,0),offset).rg;
    [flatten]if(dot(e,1.0)<1.9)break;
    offset+=dir;
  }
  return i+(e.g>0.9)&&c;
}
min16int SMAASearchDiag2(Texture2D<float2>edgesTex,min16int2 vPixCoord,min16int2 dir,bool c)
{
  min16int2 offset=dir;
  float2 e=0;
  min16int i=0;
  for(i=0;
  i<0;
  i++)
  {
    e.g=edgesTex.Load(int3(vPixCoord,0),offset).g;
    e.r=edgesTex.Load(int3(vPixCoord,0),offset+int2(1,0)).r;
    [flatten]if(dot(e,1.0)<1.9)break;
    offset+=dir;
  }
  return i+(e.g>0.9)&&c;
}
float2 SMAAAreaDiag(Texture2D<float4>areaTex,SamplerState sampSt,min16int2 distance,float2 e,float offset)
{
  float2 texcoord=20*e+distance;
  float2 SMAA_AREATEX_PIXEL_SIZE=1.0/float2(160.0,560.0);
  texcoord=SMAA_AREATEX_PIXEL_SIZE*texcoord+(0.5*SMAA_AREATEX_PIXEL_SIZE);
  texcoord.x+=0.5;
  texcoord.y+=0.1428571*offset;
  return GetTexture2DLod(areaTex,sampSt,float4(texcoord,0,0)).rg;
}
float2 SMAACalculateDiagWeights(Texture2D<float2>edgesTex,SamplerState sampStE,Texture2D<float4>areaTex,SamplerState sampStA,min16int2 vPixCoord,float4 ScreenSize,float2 texcoord,float2 e,half4 subsampleIndices)
{
  float2 weights=0.0;
  float right=edgesTex.Load(int3(vPixCoord,0),int2(1,0)).r;
  min16int2 d;
  d.x=e.r?SMAASearchDiag1(edgesTex,vPixCoord,min16int2(-1,1),true):0;
  d.y=SMAASearchDiag1(edgesTex,vPixCoord,min16int2(1,-1),false);
  [branch]if(d.r+d.g>2)
  {
    min16int4 coords=vPixCoord.xyxy+min16int4(-d.r,d.r,d.g,-d.g);
    float4 c;
    c.x=edgesTex.Load(int3(coords.xy,0),int2(-1,0)).g;
    c.y=edgesTex.Load(int3(coords.xy,0),int2(0,0)).r;
    c.z=edgesTex.Load(int3(coords.zw,0),int2(1,0)).g;
    c.w=edgesTex.Load(int3(coords.zw,0),int2(1,-1)).r;
    float2 e=2.0*c.xz+c.yw;
    e*=step(d.rg,0-1);
    weights+=SMAAAreaDiag(areaTex,sampStA,d,e,subsampleIndices.z);
  }
  d.x=SMAASearchDiag2(edgesTex,vPixCoord,min16int2(-1,-1),false);
  d.y=right?SMAASearchDiag2(edgesTex,vPixCoord,min16int2(1,1),true):0;
  [branch]if(d.r+d.g>2)
  {
    min16int4 coords=vPixCoord.xyxy+min16int4(-d.r,-d.r,d.g,d.g);
    float4 c;
    c.x=edgesTex.Load(int3(coords.xy,0),int2(-1,0)).g;
    c.y=edgesTex.Load(int3(coords.xy,0),int2(0,-1)).r;
    c.zw=edgesTex.Load(int3(coords.zw,0),int2(1,0)).gr;
    float2 e=2.0*c.xz+c.yw;
    e*=step(d.rg,0-1);
    weights+=SMAAAreaDiag(areaTex,sampStA,d,e,subsampleIndices.w).gr;
  }
  return weights;
}
float SMAASearchLength(Texture2D<float4>searchTex,SamplerState sampStS,float2 e,float bias,float scale)
{
  e.r=bias+e.r*scale;
  return 255.0*GetTexture2DLod(searchTex,sampStS,float4(e,0,0)).r;
}
float SMAASearchXLeft(Texture2D<float2>edgesTex,SamplerState sampStE,Texture2D<float4>searchTex,SamplerState sampStS,float4 ScreenSize,float2 texcoord,float end)
{
  float2 e=float2(0.0,1.0);
  while(texcoord.x>end&&e.g>0.8281&&e.r==0.0)
  {
    e=GetTexture2DLod(edgesTex,sampStE,float4(texcoord,0,0)).rg;
    texcoord-=float2(2.0,0.0)*ScreenSize.zw;
  }
  texcoord.x+=0.25*ScreenSize.z;
  texcoord.x+=ScreenSize.z;
  texcoord.x+=2.0*ScreenSize.z;
  texcoord.x-=ScreenSize.z*SMAASearchLength(searchTex,sampStS,e,0.0,0.5);
  return texcoord.x;
}
float SMAASearchXRight(Texture2D<float2>edgesTex,SamplerState sampStE,Texture2D<float4>searchTex,SamplerState sampStS,float4 ScreenSize,float2 texcoord,float end)
{
  float2 e=float2(0.0,1.0);
  while(texcoord.x<end&&e.g>0.8281&&e.r==0.0)
  {
    e=GetTexture2DLod(edgesTex,sampStE,float4(texcoord,0,0)).rg;
    texcoord+=float2(2.0,0.0)*ScreenSize.zw;
  }
  texcoord.x-=0.25*ScreenSize.z;
  texcoord.x-=ScreenSize.z;
  texcoord.x-=2.0*ScreenSize.z;
  texcoord.x+=ScreenSize.z*SMAASearchLength(searchTex,sampStS,e,0.5,0.5);
  return texcoord.x;
}
float SMAASearchYUp(Texture2D<float2>edgesTex,SamplerState sampStE,Texture2D<float4>searchTex,SamplerState sampStS,float4 ScreenSize,float2 texcoord,float end)
{
  float2 e=float2(1.0,0.0);
  while(texcoord.y>end&&e.r>0.8281&&e.g==0.0)
  {
    e=GetTexture2DLod(edgesTex,sampStE,float4(texcoord,0,0)).rg;
    texcoord-=float2(0.0,2.0)*ScreenSize.zw;
  }
  texcoord.y+=0.25*ScreenSize.w;
  texcoord.y+=ScreenSize.w;
  texcoord.y+=2.0*ScreenSize.w;
  texcoord.y-=ScreenSize.w*SMAASearchLength(searchTex,sampStS,e.gr,0.0,0.5);
  return texcoord.y;
}
float SMAASearchYDown(Texture2D<float2>edgesTex,SamplerState sampStE,Texture2D<float4>searchTex,SamplerState sampStS,float4 ScreenSize,float2 texcoord,float end)
{
  float2 e=float2(1.0,0.0);
  while(texcoord.y<end&&e.r>0.8281&&e.g==0.0)
  {
    e=GetTexture2DLod(edgesTex,sampStE,float4(texcoord,0,0)).rg;
    texcoord+=float2(0.0,2.0)*ScreenSize.zw;
  }
  texcoord.y-=0.25*ScreenSize.w;
  texcoord.y-=ScreenSize.w;
  texcoord.y-=2.0*ScreenSize.w;
  texcoord.y+=ScreenSize.w*SMAASearchLength(searchTex,sampStS,e.gr,0.5,0.5);
  return texcoord.y;
}
float2 SMAAArea(Texture2D<float4>areaTex,SamplerState sampStA,float2 distance,float e1,float e2,float offset)
{
  float2 texcoord=16*round(4.0*float2(e1,e2))+distance;
  float2 SMAA_AREATEX_PIXEL_SIZE=1.0/float2(160.0,560.0);
  texcoord=SMAA_AREATEX_PIXEL_SIZE*texcoord+(0.5*SMAA_AREATEX_PIXEL_SIZE);
  texcoord.y+=0.1428571*offset;
  return GetTexture2DLod(areaTex,sampStA,float4(texcoord,0,0)).rg;
}
void SMAADetectHorizontalCornerPattern(Texture2D<float2>edgesTex,SamplerState sampStE,inout float2 weights,float4 ScreenSize,float2 texcoord,float2 d)
{
  float4 coords=mad(float4(d.x,0.0,d.y,0.0),ScreenSize.zwzw,texcoord.xyxy);
  float2 e;
  e.r=GetTexture2DLod(edgesTex,sampStE,float4(coords.xy+float2(0.0,1.0)*ScreenSize.zw,0,0)).r;
  bool left=abs(d.x)<abs(d.y);
  e.g=GetTexture2DLod(edgesTex,sampStE,float4(coords.xy+float2(0.0,-2.0)*ScreenSize.zw,0,0)).r;
  if(left)weights*=saturate(0/100.0+1.0-e);
  e.r=GetTexture2DLod(edgesTex,sampStE,float4(coords.zw+float2(1.0,1.0)*ScreenSize.zw,0,0)).r;
  e.g=GetTexture2DLod(edgesTex,sampStE,float4(coords.zw+float2(1.0,-2.0)*ScreenSize.zw,0,0)).r;
  if(!left)weights*=saturate(0/100.0+1.0-e);
}
void SMAADetectVerticalCornerPattern(Texture2D<float2>edgesTex,SamplerState sampStE,inout float2 weights,float4 ScreenSize,float2 texcoord,float2 d)
{
  float4 coords=mad(float4(0.0,d.x,0.0,d.y),ScreenSize.zwzw,texcoord.xyxy);
  float2 e;
  e.r=GetTexture2DLod(edgesTex,sampStE,float4(coords.xy+float2(1.0,0.0)*ScreenSize.zw,0,0)).g;
  bool left=abs(d.x)<abs(d.y);
  e.g=GetTexture2DLod(edgesTex,sampStE,float4(coords.xy+float2(-2.0,0.0)*ScreenSize.zw,0,0)).g;
  if(left)weights*=saturate(0/100.0+1.0-e);
  e.r=GetTexture2DLod(edgesTex,sampStE,float4(coords.zw+float2(1.0,1.0)*ScreenSize.zw,0,0)).g;
  e.g=GetTexture2DLod(edgesTex,sampStE,float4(coords.zw+float2(-2.0,1.0)*ScreenSize.zw,0,0)).g;
  if(!left)weights*=saturate(0/100.0+1.0-e);
}
pixout BlendWeightSMAA_PS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  float4 weights=0.0;
  float4 ScreenSize=PS_ScreenSize;
  ScreenSize.zw*=2;
  float2 pixcoord=IN.WPos.xy;
  float4 offset[3]=
  {
    float4(IN.baseTC.xyxy+float4(-0.25,-0.125,1.25,-0.125)*ScreenSize.zwzw),float4(IN.baseTC.xyxy+float4(-0.125,-0.25,-0.125,1.25)*ScreenSize.zwzw),float4(IN.baseTC.xyxy)};
  offset[2]=float4(offset[0].xz,offset[1].yw)+float4(-2,2,-2,2)*ScreenSize.zzww*8;
  const min16int2 vPixCoord=min16int2(IN.WPos.xy);
  float2 e=BlndWgtSMAA_Edge.Load(int3(vPixCoord,0));
  const float4 vSubSampleIndices=0;
  [branch]if(e.g>0.0h)
  {
    weights.rg=SMAACalculateDiagWeights(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,BlndWgtSMAA_Area,BlndWgtSMAA_EdSampler,vPixCoord,ScreenSize,IN.baseTC.xy,e,vSubSampleIndices);
    [branch]if(dot(weights.rg,1.0)==0.0)
    {
      float2 d;
      float2 coords;
      coords.x=SMAASearchXLeft(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,BlndWgtSMAA_Srch,BlndWgtSMAA_SrSampler,ScreenSize,offset[0].xy,offset[2].x);
      coords.y=offset[1].y;
      d.x=coords.x;
      float e1=GetTexture2DLod(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,float4(coords,0,0)).r;
      coords.x=SMAASearchXRight(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,BlndWgtSMAA_Srch,BlndWgtSMAA_SrSampler,ScreenSize,offset[0].zw,offset[2].y);
      d.y=coords.x;
      d=d/ScreenSize.z-pixcoord.x;
      float2 sqrt_d=sqrt(abs(d));
      float e2=GetTexture2DLod(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,float4(coords+float2(1,0)*ScreenSize.zw,0,0)).r;
      ;
      weights.rg=SMAAArea(BlndWgtSMAA_Area,BlndWgtSMAA_EdSampler,sqrt_d,e1,e2,vSubSampleIndices.y);
      SMAADetectHorizontalCornerPattern(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,weights.rg,ScreenSize,IN.baseTC.xy,d);
    }
    else
    {
      e.r=0.0;
    }
    }
  [branch]if(e.r>0.0f)
  {
    float2 d;
    float2 coords;
    coords.y=SMAASearchYUp(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,BlndWgtSMAA_Srch,BlndWgtSMAA_SrSampler,ScreenSize,offset[1].xy,offset[2].z);
    coords.x=offset[0].x;
    d.x=coords.y;
    float e1=GetTexture2DLod(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,float4(coords,0,0)).g;
    coords.y=SMAASearchYDown(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,BlndWgtSMAA_Srch,BlndWgtSMAA_SrSampler,ScreenSize,offset[1].zw,offset[2].w);
    d.y=coords.y;
    d=d/ScreenSize.w-pixcoord.y;
    float2 sqrt_d=sqrt(abs(d));
    float e2=GetTexture2DLod(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,float4(coords+float2(0,1)*ScreenSize.zw,0,0)).g;
    weights.ba=SMAAArea(BlndWgtSMAA_Area,BlndWgtSMAA_EdSampler,sqrt_d,e1,e2,vSubSampleIndices.x);
    SMAADetectVerticalCornerPattern(BlndWgtSMAA_Edge,BlndWgtSMAA_EdSampler,weights.ba,ScreenSize,IN.baseTC.xy,d);
  }
  OUT.Color=weights;
  return OUT;
}