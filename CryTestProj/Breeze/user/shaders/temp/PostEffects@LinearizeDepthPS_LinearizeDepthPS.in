/*
BgAAAHBzXzZfMAAAEAAAAExpbmVhcml6ZURlcHRoUFMDARAAAABAQAERAAAAAEYBEAAAAABAzMwAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float4 NearProjection;
  float4 PS_ScreenSize;
};
Texture2DMS<float>LinearizeDepth_DepthTexMS:register(t0, space0);
Texture2D<float>LinearizeDepth_DepthTex:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
float4 MapUnnormalizedRasterToClip(float2 unnormalizedRasterPos,float depth,bool bPerformPerspectiveDivision=true)
{
  return float4(unnormalizedRasterPos,depth,1.0);
}
struct vtxOutTexToTex
{
  float4 HPosition:SV_POSITION;
  float2 baseTC:TEXCOORD0;
};
pixout LinearizeDepthPS(vtxOutTexToTex IN)
{
  pixout OUT=(pixout)0;
  int3 vPixCoord=int3(IN.baseTC.xy/CV_HPosScale.xy*PS_ScreenSize.xy,0);
  float fDevDepth=LinearizeDepth_DepthTex.Load(vPixCoord);
  const float fNearestMax=CV_ProjRatio.y/(NearProjection.z-CV_ProjRatio.x);
  float fDepthLinear=CV_ProjRatio.y/(fDevDepth-CV_ProjRatio.x);
  if(fDepthLinear<fNearestMax)
  {
    fDepthLinear=NearProjection.y/(fDevDepth-NearProjection.x);
  }
  OUT.Color.x=(fDevDepth==1.0)?1.0:fDepthLinear;
  return OUT;
}