/*
BgAAAHBzXzZfMAAAEQAAAERvd25zYW1wbGVEZXB0aFBTAAAAAwIQAAAAQEAQAAAAgEABEQAAAABGARAAAAAAQAAAAAAAAAAA
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float4 DownsampleDepth_Params;
};
SamplerState SampStatePoint:register(s1, space0);
Texture2D<float4>DownsampleDepth_DepthTex:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
pixout DownsampleDepthPS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  uint2 WPos=(uint2)IN.WPos.xy;
  float2 scaledTC=(IN.WPos.xy*2.0)*DownsampleDepth_Params.xy;
  float4 vMaxDepths=DownsampleDepth_DepthTex.GatherRed(SampStatePoint,float3(scaledTC,0));
  float4 vMinDepths=DownsampleDepth_DepthTex.GatherGreen(SampStatePoint,float3(scaledTC,0));
  float vPrvDepth=DownsampleDepth_DepthTex.Load(int3(2*WPos.x+((WPos.y&1)^ 1),2*WPos.y+((WPos.x&1)^ 1),0));
  OUT.Color.x=max(max(vMaxDepths.x,vMaxDepths.y),max(vMaxDepths.z,vMaxDepths.w));
  OUT.Color.y=min(min(vMinDepths.x,vMinDepths.y),min(vMinDepths.z,vMinDepths.w));
  OUT.Color.z=(vMinDepths.x+vMinDepths.y+vMinDepths.z+vMinDepths.w)*0.25;
  OUT.Color.w=vPrvDepth;
  return OUT;
}