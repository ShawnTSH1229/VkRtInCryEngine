/*
BgAAAHBzXzZfMAAABQAAAERvZlBTAAAAAgYQAAAAQEAQAAAAQEEQAAAAQEIQAAAAQEQQAAAAgEAQAAAAgEEBEAAAAABAzMzMAAAAAAAAAAA=
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4 vDofParamsFocus1;
  float4 PS_ScreenSize;
  float4 g_Taps[7*7];
};
SamplerState DOF_LCSamp:register(s5, space0);
SamplerState DOF_PCSamp:register(s4, space0);
Texture2D<float4>DOF_CoCM:register(t3, space0);
Texture2D<float4>DOF_HDRDoF0:register(t1, space0);
Texture2D<float4>DOF_HDRDoF1:register(t2, space0);
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half2 GetTexture2DLod(Texture2D<float2>tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float2 uv,float Lod)
{
  return tex.SampleLevel(samplerState,uv.xy,Lod);
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
struct pixout_dof
{
  float4 LayerNear:SV_Target0;
  float4 LayerFar:SV_Target1;
  float2 CocNearFar:SV_Target2;
};
pixout_dof DofPS(vtxOut IN)
{
  pixout_dof OUT=(pixout_dof)0;
  const int nNumTaps=vDofParamsFocus1.z;
  float2 fCocScale=PS_ScreenSize.zw*2.0;
  float scale=max(PS_ScreenSize.x/1920,PS_ScreenSize.y/1080)*4;
  fCocScale*=scale;
  static const float fOpticalVignettingAmount=0.2f;
  float2 optv_tc=(IN.baseTC.xy*2-1)*fOpticalVignettingAmount;
  fCocScale*=0.15;
  float4 cCenterTapNear=GetTexture2DLod(DOF_HDRDoF0,DOF_LCSamp,float4(IN.baseTC.xy,0,0));
  float4 cCenterTapFar=GetTexture2DLod(DOF_HDRDoF1,DOF_LCSamp,float4(IN.baseTC.xy,0,0));
  float fCocNear=cCenterTapNear.w;
  float fCocFar=cCenterTapFar.w;
  float4 cAccNear=float4(0,0,0,0);
  float caccNear=0;
  float4 cAccFar=float4(0,0,0,fCocFar);
  float caccFar=0;
  OUT.LayerFar=cCenterTapFar;
  OUT.LayerNear=cCenterTapNear;
  const float2 vMinTileCoC=(GetTexture2DLod(DOF_CoCM,DOF_PCSamp,float4(IN.baseTC.xy,0,0)).rg);
  [branch]if(vMinTileCoC.r>0.0)
  {[loop]for(int t=0;
    t<nNumTaps;
    t++)
    {
      const float2 offset=g_Taps[t].xy;
      const float fOptVignetting=1-abs(dot(optv_tc.xy,offset.xy));
      float2 cocOffset=vMinTileCoC.r*fOptVignetting*fCocScale*offset.xy;
      float4 cn=GetTexture2DLod(DOF_HDRDoF0,DOF_LCSamp,float4(IN.baseTC.xy+cocOffset,0,0));
      const float k=1.075;
      float wn=(cn.w>=vMinTileCoC.r*k)?1:saturate(vMinTileCoC.r*k-cn.w);
      cAccNear=max(cAccNear,cn);
    }
    }
  
  {[loop]for(int t=0;
    t<nNumTaps;
    t++)
    {
      const float2 offset=g_Taps[t].xy;
      const float fOptVignetting=1-abs(dot(optv_tc.xy,offset.xy));
      float2 cocOffset=fCocFar*fOptVignetting*fCocScale*offset.xy;
      float4 cf=GetTexture2DLod(DOF_HDRDoF1,DOF_LCSamp,float4(IN.baseTC.xy+cocOffset,0,0));
      float wf=(cf.w>=fCocFar)?1:saturate(cf.w);
      cAccFar=max(cAccFar,cf*wf);
    }
    }
  OUT.LayerNear=cAccNear;
  OUT.LayerNear.a=(OUT.LayerNear.a);
  OUT.LayerFar=cAccFar;
  OUT.LayerFar.a=(OUT.LayerFar.a);
  OUT.CocNearFar.rg=(float2(OUT.LayerNear.a,OUT.LayerFar.a));
  return OUT;
}