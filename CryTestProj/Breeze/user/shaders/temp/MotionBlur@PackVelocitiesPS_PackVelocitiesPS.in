/*
BgAAAHBzXzZfMAAAEAAAAFBhY2tWZWxvY2l0aWVzUFMCAxAAAABAQBAAAABAQRAAAACAQAEQAAAAAEDMAAAAAAAAAAA=
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4x4 mViewProjPrev;
  float4 WorldViewPos;
  float4 PS_NearFarClipDist;
  //vDirectionalBlur;
  float4 vMotionBlurParams;
  //vRadBlurParam;
  float4 PS_ScreenSize;
};
SamplerState PkVel_Sampler:register(s2, space0);
Texture2D<float4>PkVel_LinDepth:register(t0, space0);
Texture2D<float4>PkVel_VelObj:register(t1, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
float GetLinearDepth(float fDevDepth,bool bScaled=false)
{
  return fDevDepth*(bScaled?PS_NearFarClipDist.y:1.0f);
}
float GetLinearDepth(Texture2D depthTexture,int2 vPixCoord,bool bScaled=false)
{
  float fDepth=depthTexture.Load(int3(vPixCoord,0)).x;
  return GetLinearDepth(fDepth,bScaled);
}
float GetLinearDepth(Texture2D depthTexture,float2 ScreenTC,bool bScaled=false)
{
  int2 vPixCoord=int2(ScreenTC*PS_ScreenSize.xy);
  return GetLinearDepth(depthTexture,vPixCoord,bScaled);
}
float2 EncodeMotionVector(float2 vMotion,bool bFastEncode=false,bool bInvert=false)
{
  if(bInvert)vMotion.y*=-1.f;
  if(!bFastEncode)vMotion=sqrt(abs(vMotion))*select(vMotion.xy>0.F,float2(1,1),float2(-1,-1));
  vMotion=vMotion*0.5h+127.f/255.f;
  return vMotion.xyxy;
}
float2 DecodeMotionVector(float2 vMotionEncoded,bool bFastEncoded=false)
{
  if(bFastEncoded)
  {
    return(vMotionEncoded-127.0f/255.0f)*2.0f;
  }
  vMotionEncoded.xy=(vMotionEncoded.xy-127.f/255.f)*2.0f;
  return(vMotionEncoded.xy*vMotionEncoded.xy)*select(vMotionEncoded.xy>0.F,float2(1,1),float2(-1,-1));
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
struct vtxOutWPOS
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
  float4 CamVec:TEXCOORD1;
};
pixout PackVelocitiesPS(vtxOutWPOS IN)
{
  pixout OUT=(pixout)0;
  const float fDepth=GetLinearDepth(PkVel_LinDepth,IN.baseTC.xy).x;
  const float3 vPosWS=WorldViewPos.xyz+IN.CamVec.xyz*fDepth;
  float3 vPrevPos=mViewProjPrev[0].xyw*vPosWS.x+(mViewProjPrev[1].xyw*vPosWS.y+(mViewProjPrev[2].xyw*vPosWS.z+mViewProjPrev[3].xyw));
  vPrevPos.xy/=vPrevPos.z;
  float2 vCurrPos=IN.baseTC.xy;
  const float4 vVelocityObjs=GetTexture2D(PkVel_VelObj,PkVel_Sampler,IN.baseTC.xy);
  vCurrPos.xy=(vVelocityObjs.x==0)?vCurrPos.xy:0;
  vPrevPos.xy=(vVelocityObjs.x==0)?vPrevPos.xy:DecodeMotionVector(vVelocityObjs);
  float2 vVelocity=(vPrevPos-vCurrPos)*vMotionBlurParams.x;
  const float MaxVelocityLen=(vVelocityObjs.x==0)?vMotionBlurParams.z:vMotionBlurParams.y;
  const float invLen=rsqrt(dot(vVelocity.xy,vVelocity.xy)+1e-6f);
  vVelocity*=saturate(MaxVelocityLen*invLen);
  float2 vBlur=0;
  vVelocity+=vBlur;
  OUT.Color.xy=EncodeMotionVector(vVelocity);
  OUT.Color.z=sqrt(length(vVelocity.xy)*32.0f);
  OUT.Color.w=fDepth*PS_NearFarClipDist.y/255.0f;
  return OUT;
}