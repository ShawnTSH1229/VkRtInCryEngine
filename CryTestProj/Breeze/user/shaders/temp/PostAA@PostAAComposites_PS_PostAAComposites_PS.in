/*
BgAAAHBzXzZfMAAAEwAAAFBvc3RBQUNvbXBvc2l0ZXNfUFMAAggQAAAAQEAQAAAAQEUQAAAAQEYQAAAAQEcQAAAAQEgQAAAAgEAQAAAAgEEQAAAAgEIBEAAAAABAzMzMAAAAAAAAAAA=
*/

cbuffer PER_BATCH:register(b0, space1)
{
  //vParams;
  //HDREyeAdaptation;
  float4 HDRParams;
  float4 PS_ScreenSize;
  //vLensOpticsParams;
  float Time;
};
SamplerState PAAComp_CCSS:register(s5, space0);
SamplerState PAAComp_LLSS:register(s6, space0);
SamplerState PostAA_GrainSS:register(s7, space0);
Texture2D<float4>PAAComp_LumTex:register(t3, space0);
Texture2D<float4>PAAComp_CurTarg:register(t0, space0);
Texture2D<float4>PAAComp_ClrChart:register(t4, space0);
Texture3D<float4>PostAA_Grain:register(t2, space0);
Texture2D<float4>PAAComp_LensOpt:register(t1, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
float4 sqr(float4 x)
{
  return x*x;
}
float3 sqr(float3 x)
{
  return x*x;
}
float2 sqr(float2 x)
{
  return x*x;
}
float sqr(float x)
{
  return x*x;
}
half3 LimitREC709_8Bit(half3 col)
{
  return(16.0/255.0)+col.xyz*((235.0-16.0)/255.0);
}
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
void TexColorChart2D(in Texture2D chartTex,in SamplerState chartSampler,inout half3 cImage)
{
  const float chartDim=16.0;
  const float3 scale=float3(chartDim-1.0,chartDim-1.0,chartDim-1.0)/chartDim;
  const float3 bias=float3(0.5,0.5,0.0)/chartDim;
  float3 lookup=saturate(cImage)*scale+bias;
  float slice=lookup.z*chartDim;
  float sliceFrac=frac(slice);
  float sliceIdx=slice-sliceFrac;
  lookup.x=(lookup.x+sliceIdx)/chartDim;
  float3 col0=GetTexture2D(chartTex,chartSampler,lookup.xy);
  lookup.x+=1.0/chartDim;
  float3 col1=GetTexture2D(chartTex,chartSampler,lookup.xy);
  cImage=col0+(col1-col0)*sliceFrac;
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
cbuffer CBPostAA:register(b0, space1)
{
  struct TemporalAAConstants
  {
    float4x4 matReprojection;
    float4 params;
    float4 screenSize;
  }
  cbPostAA;
};
void ApplyFilmGrain(inout half4 cScene,in half3 cColor,float4 WPos,float4 baseTC)
{
  half fFilmGrain=PostAA_Grain.Sample(PostAA_GrainSS,float4(baseTC.xy*4.0f*float2(PS_ScreenSize.x/PS_ScreenSize.y,1.0f),Time*3,0)).x;
  fFilmGrain=lerp(0.5h,fFilmGrain,HDRParams.w);
  cScene.xyz=step(0.5h,cColor.xyz);
  cScene.xyz=lerp((cColor.xyz*fFilmGrain*2.h),(1.h-(2.h*(1.h-cColor.xyz)*(1.h-fFilmGrain))),cScene.xyz);
}
pixout PostAAComposites_PS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  OUT.Color=PAAComp_CurTarg.Load(int3(IN.WPos.xy,0));
  ApplyFilmGrain(OUT.Color,OUT.Color,IN.WPos,IN.baseTC);
  OUT.Color=saturate(OUT.Color);
  return OUT;
}