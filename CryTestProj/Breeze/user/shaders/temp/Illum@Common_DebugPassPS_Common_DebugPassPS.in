/*
BgAAAHBzXzZfMAAAEgAAAENvbW1vbl9EZWJ1Z1Bhc3NQUwAABAEVAAAAAEAGAQAAAABCAQAAAABDFwAAAABEAQAAAEBOBAAAAEBQEAAAAEByDx8AAAAAQR8AAABAQB8AAABAQR8AAABAQh8AAABAQx8AAABARB8AAABARR8AAABARh8AAABARx8AAABASB8AAABASR8AAABASh8AAABASx8AAABATB8AAABATR0fAAAAAEUfAAAAAEYfAAAAQFkBAAAAQFoBAAAAQFsQAAAAQFwQAAAAQF0QAAAAQF4QAAAAQGAQAAAAQGEfAAAAQGMfAAAAQGQfAAAAQGUfAAAAgEAfAAAAgEEfAAAAgEIfAAAAgEMfAAAAgEQfAAAAgEUfAAAAgEYfAAAAgEcfAAAAgEgfAAAAgEkfAAAAgEofAAAAgEsQAAAAwEIQAAAAwEMQAAAAwEQQAAAAwEXMAAAAAAAAAAA=
*/

cbuffer PER_BATCH:register(b0, space0)
{
  float4 vfHeightDensityRampParams;
  float4 vfScatteringParams;
  float4 vfGlobalEnvProbeParams0;
  float4 vfScatteringBlendParams;
  float4 vfScatteringColor;
  float4 vfDistributionParams;
  float4 vfSamplingParams;
  float3 vfColGradDelta;
  float4 irreg_kernel_2d[16/2];
  float4 vfRampParams;
  float4 vfColGradRadial;
  float4 vfGlobalEnvProbeParams1;
  float4 PS_NearFarClipDist;
  float4 vfColGradParams;
  float4 vfHeightDensityParams;
  float4 PS_ScreenSize;
  float3 vfColGradBase;
  float4 vfDistanceParams;
  float4 vfParams;
  float4 vfScatteringSecondaryColor;
  float4 vfSunDir;
};
cbuffer PER_MATERIAL:register(b0, space2)
{
  float4 CM_DetailTilingAndAlphaRef:packoffset(c36);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3:packoffset(c38);
  float __0EmittanceMapGamma__1__2__3:packoffset(c42);
  float2 __0__1SSSIndex__2__3:packoffset(c48);
};
SamplerState ssMaterialBilinearClamp:register(s18, space3);
SamplerState ssMaterialAnisoHigh:register(s13, space3);
Texture2D linearDepthTex:register(t8, space3);
Texture2D<float4>texelPerMeterTex:register(t9, space3);
Texture2D diffuseTex:register(t1, space2);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b1, space3)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b0, space3)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b0, space3)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
half GetAlphaTex(Texture2D tex,float2 texTC)
{
  return GetTexture2D(tex,ssMaterialAnisoHigh,texTC.xy).a;
}
half4 GetDiffuseTex(Texture2D tex,float2 texTC)
{
  return GetTexture2D(tex,ssMaterialAnisoHigh,texTC.xy);
}
float GetLinearDepth(float fDevDepth,bool bScaled=false)
{
  return fDevDepth*(bScaled?PS_NearFarClipDist.y:1.0f);
}
float GetLinearDepth(Texture2D depthTexture,int2 vPixCoord,bool bScaled=false)
{
  float fDepth=depthTexture.Load(int3(vPixCoord,0)).x;
  return GetLinearDepth(fDepth,bScaled);
}
float GetLinearDepth(Texture2D depthTexture,float2 ScreenTC,bool bScaled=false)
{
  int2 vPixCoord=int2(ScreenTC*PS_ScreenSize.xy);
  return GetLinearDepth(depthTexture,vPixCoord,bScaled);
}
float GetDissolveThreshold5(int2 sc)
{
  return abs(dot(half4(0.0h,0.76h,0.5h,-1.0h),sc.xxyy % 2));
}
float GetDissolveThreshold9(int2 sc)
{
  float tm[2][4]=
  {
    {
      0.0f/8,4.0f/8,2.0f/8,6.0f/8}
    ,
    {
      3.0f/8,7.0f/8,1.0f/8,5.0f/8}
    };
  return tm[sc.y&1][sc.x&3];
}
float GetDissolveThreshold17(int2 sc)
{
  float tm[4][4]=
  {
    {
      0.0f/16,12.0f/16,3.0f/16,15.0f/16}
    ,
    {
      8.0f/16,4.0f/16,11.0f/16,7.0f/16}
    ,
    {
      2.0f/16,14.0f/16,1.0f/16,13.0f/16}
    ,
    {
      10.0f/16,6.0f/16,9.0f/16,5.0f/16}
    };
  return tm[sc.y&3][sc.x&3];
}
float GetDissolveThreshold33(int2 sc)
{
  float tm[4][8]=
  {
    {
      0.0f/32,16.0f/32,8.0f/32,24.0f/32,2.0f/32,18.0f/32,10.0f/32,26.0f/32}
    ,
    {
      12.0f/32,28.0f/32,4.0f/32,20.0f/32,14.0f/32,30.0f/32,6.0f/32,22.0f/32}
    ,
    {
      3.0f/32,19.0f/32,11.0f/32,27.0f/32,1.0f/32,17.0f/32,9.0f/32,25.0f/32}
    ,
    {
      15.0f/32,31.0f/32,7.0f/32,23.0f/32,13.0f/32,29.0f/32,5.0f/32,21.0f/32}
    };
  return tm[sc.y&3][sc.x&7];
}
float TestDissolve(float fDissolve,int2 sc,int levels=17)
{
  return 0.0f;
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
cbuffer CBPerInstance:register(b0, space0)
{};
cbuffer CBPerDraw:register(b0, space0)
{
  float3x4 CD_WorldMatrix;
  float3x4 CD_PrevWorldMatrix;
  float4 CD_CustomData;
  float4 CD_CustomData1;
  float4 CD_CustomData2;
  float4 CD_LightMapScaleAndOffset;
};
float Get_MaterialAlphaTest()
{
  return CM_DetailTilingAndAlphaRef.z;
}
float Get_SPI_Dissolve()
{
  return CD_CustomData.w;
}
cbuffer CBPerPassForward:register(b0, space3)
{
  struct
  {
    float4 vfParams;
    float4 vfRampParams;
    float4 vfSunDir;
    float3 vfColGradBase;
    float padding0;
    float3 vfColGradDelta;
    float padding1;
    float4 vfColGradParams;
    float4 vfColGradRadial;
    float4 vfShadowDarkening;
    float4 vfShadowDarkeningSunAmb;
  }
  cbFog;
  struct
  {
    float4 vfSamplingParams;
    float4 vfDistributionParams;
    float4 vfScatteringParams;
    float4 vfScatteringBlendParams;
    float4 vfScatteringColor;
    float4 vfScatteringSecondaryColor;
    float4 vfHeightDensityParams;
    float4 vfHeightDensityRampParams;
    float4 vfDistanceParams;
    float4 vfGlobalEnvProbeParams0;
    float4 vfGlobalEnvProbeParams1;
  }
  cbVoxelFog;
  struct
  {
    float4x4 TexGen0;
    float4x4 TexGen1;
    float4x4 TexGen2;
    float4x4 TexGen3;
    float4 vInvShadowMapSize;
    float4 fDepthTestBias;
    float4 fOneDivFarDist;
    float4 fKernelRadius;
    float4 CloudShadowParams;
    float4 CloudShadowAnimParams;
    float4 irreg_kernel_2d[8];
  }
  cbShadowSampling;
  struct
  {
    float4 CloudShadingColorSun;
    float4 CloudShadingColorSky;
  }
  cbClouds;
  struct
  {
    float4 IntegrationMode;
  }
  cbSVOGI;
};
struct vert2fragDebug
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
  float4 vView:TEXCOORD1;
};
RWBuffer<uint>CounterTarget:register(u25, space3);
RWBuffer<uint>DepthTarget:register(u26, space3);
RWBuffer<uint>StatsTarget:register(u27, space3);
RWBuffer<uint>HistogramTarget:register(u28, space3);
void UpdateCounter(uint BufferPos)
{
  const uint IncrementValue=1;
  uint PreviousValue;
  InterlockedAdd(CounterTarget[BufferPos],IncrementValue,PreviousValue);
  if(PreviousValue<255)
  {
    InterlockedAdd(HistogramTarget[PreviousValue+0],-1);
    InterlockedAdd(HistogramTarget[PreviousValue+1],+1);
  }
  }
pixout Common_DebugPassPS(vert2fragDebug IN,uint c0:SV_Coverage)
{
  pixout OUT=(pixout)0;
  bool alphatested=false;
  bool dissolved=TestDissolve(Get_SPI_Dissolve(),IN.WPos.xy,33)<0.0f;
  OUT.Color=float4(IN.baseTC.x,IN.baseTC.y,0,0);
  uint selectionID=asuint(CD_CustomData2.x);
  float fGeomDepth=IN.WPos.w*CV_NearFarClipDist.w;
  float fSceneDepth=GetLinearDepth(linearDepthTex,int2(IN.WPos.xy));
  if(fGeomDepth>fSceneDepth*1.001)
  {
    selectionID|=(1<<2);
  }
  OUT.Color.x=asfloat(selectionID);
  return OUT;
}