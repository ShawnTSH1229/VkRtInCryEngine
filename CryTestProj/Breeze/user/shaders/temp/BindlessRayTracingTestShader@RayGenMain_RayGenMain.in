/*
BwAAAGxpYl82XzMACgAAAFJheUdlbk1haW4AAAEEHA0AAABAHA0AAEBBHA0AAEBCHA0AAMBDzMwAAAAAAAAAAA==
*/

cbuffer cbRayTracingParams:register(b0)
{
  struct
  {
    float4x4 viewProj;
    float4x4 viewInverse;
    float4x4 projInverse;
    float4 lightdirection;
    float4 padding0;
    float4 padding1;
    float4 padding2;
  }
  rayTracingParams;
};
RaytracingAccelerationStructure topLevelAS:register(t1);
RWTexture2D<float4>image:register(u3);
struct SHitPayload
{
  float3 hitValue;
};
[shader("raygeneration")]void RayGenMain()
{
  const uint2 rayIndex=DispatchRaysIndex().xy;
  const uint2 rayDimension=DispatchRaysDimensions().xy;
  const float2 pixelCenter=float2(rayIndex.xy)+float2(0.5,0.5);
  const float2 inUV=pixelCenter/float2(rayDimension.xy);
  float2 d=float2(inUV*2.0-1.0)*float2(1.0,-1.0);
  float4 rayOrigin=mul(rayTracingParams.viewInverse,float4(0,0,0,1));
  float4 target=mul(rayTracingParams.projInverse,float4(d.x,d.y,1.0,1.0));
  float4 direction=mul(rayTracingParams.viewInverse,float4(normalize(target.xyz),0.0));
  RayDesc ray;
  ray.Origin=rayOrigin;
  ray.Direction=direction;
  ray.TMin=0.001f;
  ray.TMax=10000.0;
  uint rayFlags=RAY_FLAG_FORCE_OPAQUE;
  const uint instanceInclusionMask=0x01;
  SHitPayload payload=(SHitPayload)0;
  TraceRay(topLevelAS,rayFlags,instanceInclusionMask,0,2,1,ray,payload);
  image[rayIndex]=float4(payload.hitValue.xyz,1.0);
}