/*
BgAAAHBzXzZfMAAAGAAAAEx1bWFFZGdlRGV0ZWN0aW9uU01BQV9QUwMCEAAAAEBAEAAAAIBAAREAAAAARgEQAAAAAEAAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space2)
{
  half4 vParams;
};
Texture2D<float3>LumEdSMAA_Source:register(t0, space0);
cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half3 GetLuminanceWeights()
{
  return half3(0.2126h,0.7152h,0.0722h);
}
half3 SRGBToLinearApproximation(half3 col)
{
  col=saturate(col);
  return col*(col*(col*0.305306011h+0.682171111h)+0.012522878h);
}
half3 SRGBToLinearApproximation(half3 col,half3 weights)
{
  col=saturate(col);
  return col.r*(col.r*(col.r*0.305306011h+0.682171111h)+0.012522878h)*weights.r+col.g*(col.g*(col.g*0.305306011h+0.682171111h)+0.012522878h)*weights.g+col.b*(col.b*(col.b*0.305306011h+0.682171111h)+0.012522878h)*weights.b;
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
cbuffer CBPostAA:register(b0, space2)
{
  struct TemporalAAConstants
  {
    float4x4 matReprojection;
    float4 params;
    float4 screenSize;
  }
  cbPostAA;
};
float2 LumaEdgeDetectionSMAA_PS(vtxOut IN):SV_Target
{
  const int3 vPixCoord=int3(IN.WPos.xy,0);
  const half3 weights=GetLuminanceWeights();
  half L=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(0,0)),weights);
  half Lleft=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(-1,0)),weights);
  half Ltop=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(0,-1)),weights);
  half4 delta;
  delta.xy=abs(L.xx-half2(Lleft,Ltop));
  half2 edges=step(vParams.x,delta.xy);
  if(dot(edges,1.0h)==0.0h)discard;
  half Lright=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(1,0)),weights);
  half Lbottom=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(0,1)),weights);
  delta.zw=abs(L.xx-half2(Lright,Lbottom));
  half maxDelta=max(max(max(delta.x,delta.y),delta.z),delta.w);
  half Lleftleft=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(-2,0)),weights);
  half Ltoptop=SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord,int2(0,-2)),weights);
  delta.zw=abs(half2(Lleft,Ltop)-half2(Lleftleft,Ltoptop));
  maxDelta=max(max(maxDelta,delta.z),delta.w);
  edges.xy*=step(0.5*maxDelta,delta.xy);
  return edges;
}