/*
BgAAAHBzXzZfMAAACQAAAFNreVBhc3NQUwAAAAMGEAAAAEBAEAAAAEBBEAAAAEBCEAAAAEBDEAAAAIBAEAAAAIBBAREAAAAARgEQAAAAAEAAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float3 SkyDome_NightMoonTexGenUp;
  float4 vfHeightDensityRampParams;
  //SkyDome_SkyBoxOpacity;
  float4 vfScatteringParams;
  float4 vfGlobalEnvProbeParams0;
  float3 SkyDome_NightMoonTexGenRight;
  float4 SkyDome_NightMoonOuterCoronaColorScale;
  float4 vfScatteringBlendParams;
  float4 vfScatteringColor;
  float4 SkyDome_NightMoonDirSize;
  float4 vfDistributionParams;
  float4 vfSamplingParams;
  float3 vfColGradDelta;
  float2 SkyDome_NightSkyZenithColShift;
  float4 irreg_kernel_2d[16/2];
  float4 vfRampParams;
  float4 vfColGradRadial;
  float3 SkyDome_PartialMieInScatteringConst;
  float4 vfGlobalEnvProbeParams1;
  float4 SkyDome_NightMoonInnerCoronaColorScale;
  float3 SkyDome_NightSkyColBase;
  float3 SkyDome_PhaseFunctionConstants;
  float4 vfColGradParams;
  float3 SkyDome_PartialRayleighInScatteringConst;
  float4 vfHeightDensityParams;
  //SkyDome_SkyBoxParams;
  float3 vfColGradBase;
  float3 SkyDome_SunDirection;
  float4 vfDistanceParams;
  float4 vfParams;
  float3 SkyDome_NightSkyColDelta;
  float4 vfScatteringSecondaryColor;
  float3 SkyDome_NightMoonColor;
  float4 vfSunDir;
  //SkyDome_SkyBoxExposure;
};
cbuffer PER_MATERIAL:register(b1)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3:packoffset(c38);
};
SamplerState SkyDome_ScatSS:register(s5, space0);
SamplerState SkyDome_TexSS:register(s4, space0);
Texture2D<float4>SkyDome_Tex:register(t0, space0);
Texture2D<float4>SkyDome_Rayleigh:register(t2, space0);
Texture2D<float4>SkyDome_Mie:register(t1, space0);
Texture2D<float4>SkyDome_Moon:register(t3, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half2 GetTexture2DLod(Texture2D<float2>tex,SamplerState samplerState,float4 uv)
{
  return tex.SampleLevel(samplerState,uv.xy,uv.w);
}
half4 GetTexture2DLod(Texture2D tex,SamplerState samplerState,float2 uv,float Lod)
{
  return tex.SampleLevel(samplerState,uv.xy,Lod);
}
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
float3 ReconstructWorldPos(int2 WPos,float linearDepth,bool bRelativeToCamera=false)
{
  float4 wposScaled=float4(WPos*linearDepth,linearDepth,bRelativeToCamera?0.0:1.0);
  return mul(CV_ScreenToWorldBasis,wposScaled);
}
float3 ReconstructWorldPos(int2 WPos,Texture2D sceneDepthTex,bool bRelativeToCamera=false)
{
  float linearDepth=sceneDepthTex.Load(int3(WPos,0)).x;
  return ReconstructWorldPos(WPos,linearDepth,bRelativeToCamera);
}
float3 GetWorldViewPos()
{
  return float3(CV_ScreenToWorldBasis[0][3],CV_ScreenToWorldBasis[1][3],CV_ScreenToWorldBasis[2][3]);
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
cbuffer CBSky:register(b0, space2)
{
  struct
  {
    float4x4 WorldMatrix;
    float2 TextureSize;
    float2 TexelSize;
    float3 PartialMieInScatteringConst;
    float3 PartialRayleighInScatteringConst;
    float3 SunDirection;
    float3 PhaseFunctionConstants;
    float3 NightSkyColBase;
    float3 NightSkyColDelta;
    float2 NightSkyZenithColShift;
    float4 NightMoonDirSize;
    float3 NightMoonTexGenRight;
    float3 NightMoonTexGenUp;
    float3 NightMoonColor;
    float4 NightMoonInnerCoronaColorScale;
    float4 NightMoonOuterCoronaColorScale;
    float4 StarSize;
    float StarIntensity;
    float4 SkyBoxParams;
    float4 SkyBoxExposure;
    float4 SkyBoxOpacity;
  }
  cbSky;
};
cbuffer CBPerPassForward:register(b5)
{
  struct
  {
    float4 vfParams;
    float4 vfRampParams;
    float4 vfSunDir;
    float3 vfColGradBase;
    float padding0;
    float3 vfColGradDelta;
    float padding1;
    float4 vfColGradParams;
    float4 vfColGradRadial;
    float4 vfShadowDarkening;
    float4 vfShadowDarkeningSunAmb;
  }
  cbFog;
  struct
  {
    float4 vfSamplingParams;
    float4 vfDistributionParams;
    float4 vfScatteringParams;
    float4 vfScatteringBlendParams;
    float4 vfScatteringColor;
    float4 vfScatteringSecondaryColor;
    float4 vfHeightDensityParams;
    float4 vfHeightDensityRampParams;
    float4 vfDistanceParams;
    float4 vfGlobalEnvProbeParams0;
    float4 vfGlobalEnvProbeParams1;
  }
  cbVoxelFog;
  struct
  {
    float4x4 TexGen0;
    float4x4 TexGen1;
    float4x4 TexGen2;
    float4x4 TexGen3;
    float4 vInvShadowMapSize;
    float4 fDepthTestBias;
    float4 fOneDivFarDist;
    float4 fKernelRadius;
    float4 CloudShadowParams;
    float4 CloudShadowAnimParams;
    float4 irreg_kernel_2d[8];
  }
  cbShadowSampling;
  struct
  {
    float4 CloudShadingColorSun;
    float4 CloudShadingColorSky;
  }
  cbClouds;
  struct
  {
    float4 IntegrationMode;
  }
  cbSVOGI;
};
cbuffer CBPerInstance:register(b0, space2)
{};
cbuffer CBPerDraw:register(b0, space2)
{
  float3x4 CD_WorldMatrix;
  float3x4 CD_PrevWorldMatrix;
  float4 CD_CustomData;
  float4 CD_CustomData1;
  float4 CD_CustomData2;
  float4 CD_LightMapScaleAndOffset;
};
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
float2 GetSkyUV(float3 skyDir,float angleOffset,float stretching)
{
  float2 langlatTC=float2((atan2(-skyDir.y,-skyDir.x)+angleOffset)/3.1415*0.5+0.5,asin(skyDir.z)/3.1415+0.5);
  langlatTC.y=(1-langlatTC.y)*stretching;
  return langlatTC;
}
pixout SkyPassPS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  const float3 cameraToWorldPos=ReconstructWorldPos(IN.WPos.xy,1.0f,true);
  const float3 worldPos=GetWorldViewPos()+cameraToWorldPos;
  const float3 skyDir=normalize(cameraToWorldPos);
  half3 dayLight=half3(0,0,0);
  half3 nightLight=half3(0,0,0);
  half3 moonLight=half3(0,0,0);
  
  {
    float2 langlatTC=GetSkyUV(skyDir,0,2.0);
    half4 ColorMie=GetTexture2D(SkyDome_Mie,SkyDome_ScatSS,langlatTC.xy);
    half4 ColorRayleigh=GetTexture2D(SkyDome_Rayleigh,SkyDome_ScatSS,langlatTC.xy);
    float miePart_g_2=SkyDome_PhaseFunctionConstants.x;
    float miePart_g2_1=SkyDome_PhaseFunctionConstants.y;
    float cosine=-dot(SkyDome_SunDirection,skyDir);
    float cosine2=cosine*cosine;
    float miePhaseTmp=miePart_g2_1+miePart_g_2*cosine;
    float miePhase=miePhaseTmp>0?(1.0+cosine2)*pow(miePhaseTmp,-1.5):0;
    float rayleighPhase=0.75*(1.0+cosine2);
    dayLight=ColorMie*SkyDome_PartialMieInScatteringConst*miePhase+ColorRayleigh*SkyDome_PartialRayleighInScatteringConst*rayleighPhase;
  }
  
  {
    float gr=saturate(skyDir.z*SkyDome_NightSkyZenithColShift.x+SkyDome_NightSkyZenithColShift.y);
    gr*=2-gr;
    nightLight=SkyDome_NightSkyColBase+SkyDome_NightSkyColDelta*gr;
  }
  
  {
    float2 moonTC=float2(dot(SkyDome_NightMoonTexGenRight,skyDir),dot(SkyDome_NightMoonTexGenUp,skyDir))*SkyDome_NightMoonDirSize.w+0.5;
    float4 moonAlbedo=GetTexture2D(SkyDome_Moon,SkyDome_TexSS,moonTC.xy);
    moonLight=SkyDome_NightMoonColor.xyz*moonAlbedo.xyz*moonAlbedo.a;
    float m=1-dot(skyDir,SkyDome_NightMoonDirSize.xyz);
    moonLight+=SkyDome_NightMoonInnerCoronaColorScale.xyz*(1.0/(1.05+m*SkyDome_NightMoonInnerCoronaColorScale.w));
    moonLight+=SkyDome_NightMoonOuterCoronaColorScale.xyz*(1.0/(1.05+m*SkyDome_NightMoonOuterCoronaColorScale.w));
  }
  OUT.Color.rgb=dayLight+nightLight+moonLight;
  return OUT;
}