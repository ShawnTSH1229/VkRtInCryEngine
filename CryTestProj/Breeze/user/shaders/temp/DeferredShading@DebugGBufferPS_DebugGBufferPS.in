/*
BgAAAHBzXzZfMAAADgAAAERlYnVnR0J1ZmZlclBTAAADBRAAAABAQBAAAABAQRAAAABAQhAAAABAQxAAAACAQAEBAAAAAEABEAAAAABAzMwAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float4 DebugViewMode;
};
SamplerState GBufDBG_Sampler:register(s4, space0);
Texture2D<float4>GBufDBG_Spec:register(t3, space0);
Texture2D<float4>GBufDBG_Norms:register(t1, space0);
Texture2D<float4>GBufDBG_Diff:register(t2, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half3 GetLuminanceWeights()
{
  return half3(0.2126h,0.7152h,0.0722h);
}
half GetLuminance(half3 color)
{
  return dot(color,GetLuminanceWeights());
}
half3 DecodeColorYCC(half3 encodedCol,const bool useChrominance=true)
{
  encodedCol=half3(encodedCol.x,encodedCol.y/(127.0f/255.0f)-1,encodedCol.z/(127.0f/255.0f)-1);
  if(!useChrominance)encodedCol.yz=0;
  half3 col;
  col.r=encodedCol.x+1.402*encodedCol.z;
  col.g=dot(half3(1,-0.3441,-0.7141),encodedCol.xyz);
  col.b=encodedCol.x+1.772*encodedCol.y;
  return col*col;
}
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
struct MaterialAttribsCommon
{
  half3 NormalWorld;
  half3 Albedo;
  half3 Reflectance;
  half3 Transmittance;
  half Smoothness;
  half ScatteringIndex;
  half SelfShadowingSun;
  int LightingModel;
};
MaterialAttribsCommon DecodeGBuffer(half4 bufferA,half4 bufferB,half4 bufferC)
{
  MaterialAttribsCommon attribs;
  attribs.LightingModel=(int)floor(bufferA.w*(3.0f+(255.0f/256.0f)));
  attribs.NormalWorld=normalize(bufferA.xyz*2-1);
  attribs.Albedo=bufferB.xyz*bufferB.xyz;
  attribs.Reflectance=DecodeColorYCC(bufferC.yzw,attribs.LightingModel==0);
  attribs.Smoothness=bufferC.x;
  attribs.ScatteringIndex=bufferB.w*(3.0f+(255.0f/256.0f));
  attribs.Transmittance=half3(0,0,0);
  if(attribs.LightingModel==1)
  {
    attribs.Transmittance=DecodeColorYCC(half3(frac(bufferA.w*(3.0f+(255.0f/256.0f))),bufferC.z,bufferC.w));
  }
  attribs.SelfShadowingSun=0;
  if(attribs.LightingModel==2)
  {
    attribs.SelfShadowingSun=saturate(bufferC.z/(127.0f/255.0f)-1);
  }
  return attribs;
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
cbuffer CBDeferredDecal:register(b0, space2)
{
  struct
  {
    float4x4 matVolumeProj;
    float4x4 matInvVolumeProj;
    float4x4 matDecalTS;
    float4 textureRect[2];
    float4 diffuseCol;
    float4 specularCol;
    float4 mipLevels;
    float4 generalParams;
    float4 opacityParams;
  }
  cbDecal;
};
cbuffer CBSSDO:register(b0, space2)
{
  struct SSDOConstants
  {
    float4 screenSize;
    float4 nearFarClipDist;
    float4 viewSpaceParams;
    float4 ssdoParams;
    float4 hmaoParams;
  }
  cbSSDO;
};
float3 ToSRGB(float3 col)
{
  return select((col<0.0031308),12.9200001F*col,1.05499995F*pow(col,1.F/2.4000001F)-half3(0.0549999997F,0.0549999997F,0.0549999997F));
}
pixout DebugGBufferPS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  MaterialAttribsCommon attribs;
  attribs=DecodeGBuffer(GetTexture2D(GBufDBG_Norms,GBufDBG_Sampler,IN.baseTC.xy),GetTexture2D(GBufDBG_Diff,GBufDBG_Sampler,IN.baseTC.xy),GetTexture2D(GBufDBG_Spec,GBufDBG_Sampler,IN.baseTC.xy));
  OUT.Color.w=1;
  if(DebugViewMode.x==1)OUT.Color.xyz=attribs.NormalWorld*0.5+0.5;
  else if(DebugViewMode.x==2)OUT.Color.xyz=attribs.Smoothness;
  else if(DebugViewMode.x==3)OUT.Color.xyz=ToSRGB(attribs.Reflectance);
  else if(DebugViewMode.x==4)OUT.Color.xyz=ToSRGB(attribs.Albedo);
  else if(DebugViewMode.x==5)
  {
    if(attribs.LightingModel==0)OUT.Color.xyz=float3(0.5,0.5,0.5);
    else if(attribs.LightingModel==1)OUT.Color.xyz=float3(1,1,0);
    else if(attribs.LightingModel==2)OUT.Color.xyz=float3(0,0,1);
  }
  else if(DebugViewMode.x==6)OUT.Color.xyz=ToSRGB(attribs.Transmittance);
  else if(DebugViewMode.x==7)OUT.Color.xyz=1-attribs.SelfShadowingSun;
  else if(DebugViewMode.x==8)
  {
    if(attribs.ScatteringIndex>0)
    {
      float sssProfileIndex=floor(attribs.ScatteringIndex);
      float sssAmount=frac(attribs.ScatteringIndex);
      if(sssProfileIndex==0)OUT.Color.xyz=float3(1,1,0)*sssAmount;
      else if(sssProfileIndex==1)OUT.Color.xyz=float3(1,0,0)*sssAmount;
      else if(sssProfileIndex==2)OUT.Color.xyz=float3(0,1,0)*sssAmount;
      else if(sssProfileIndex==3)OUT.Color.xyz=float3(0,0,1)*sssAmount;
    }
    }
  else if(DebugViewMode.x==9)
  {
    float3 specCol=attribs.Reflectance;
    float minComp=min(min(specCol.r,specCol.g),specCol.b);
    float maxComp=max(max(specCol.r,specCol.g),specCol.b);
    float lum=GetLuminance(specCol);
    if(maxComp<0.019)OUT.Color.xyzw=float4(0,0,1,0.5);
    else if(maxComp>0.05&&lum<0.5)OUT.Color.xyzw=float4(1,0.5,0,0.5);
    else if(maxComp<=0.05&&maxComp-minComp>0.005)OUT.Color.xyzw=float4(1,0,0.5,0.5);
    else OUT.Color=float4(0.1,0.1,0.1,0.8);
  }
  else if(DebugViewMode.x==10)
  {
    OUT.Color=float4(GetTexture2D(GBufDBG_Norms,GBufDBG_Sampler,IN.baseTC.xy).xyz,1.0);
  }
  return OUT;
}