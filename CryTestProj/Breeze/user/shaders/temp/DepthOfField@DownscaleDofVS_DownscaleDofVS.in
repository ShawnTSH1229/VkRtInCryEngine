/*
BgAAAHZzXzZfMAAADgAAAERvd25zY2FsZURvZlZTAAADBBAAAABAQBAAAABAQRAAAACAQBAAAACAQQERAAAAAEYBEAAAAABAAAAAAAAAAAA=
*/

cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
float4 GetHPos_FromTriVertexID(uint vertexID)
{
  return float4(float2(((vertexID<<1)&2)*2.0,(vertexID==0)?-4.0:0.0)+float2(-1.0,1.0),0.0,1.0);
}
float2 GetBaseTC_FromTriVertexID(uint vertexID)
{
  return float2((vertexID<<1)&2,(vertexID==0)?2.0:0.0);
}
struct vtxOutDownscaleDof
{
  float4 HPosition:SV_POSITION;
  float4 tc0:TEXCOORD0;
  float4 tc1:TEXCOORD1;
  float4 tc2:TEXCOORD2;
  float4 tc3:TEXCOORD3;
  float4 tc4:TEXCOORD4;
  float4 tc5:TEXCOORD5;
  float4 tc6:TEXCOORD6;
};
vtxOutDownscaleDof DownscaleDofVS(uint VertexID:SV_VertexID)
{
  vtxOutDownscaleDof OUT=(vtxOutDownscaleDof)0;
  OUT.HPosition=GetHPos_FromTriVertexID(VertexID);
  float2 baseTC=GetBaseTC_FromTriVertexID(VertexID);
  OUT.tc0=baseTC.xyxy+float4(-1,-1,1,1)*CV_ScreenSize.zwzw*0.5;
  OUT.tc1=baseTC.xyxy+float4(1,-1,-1,1)*CV_ScreenSize.zwzw*0.5;
  OUT.tc3=baseTC.xyxy+float4(-1,0,1,0)*CV_ScreenSize.zwzw;
  OUT.tc4=baseTC.xyxy+float4(0,-1,0,1)*CV_ScreenSize.zwzw;
  OUT.tc5=baseTC.xyxy+float4(1,1,-1,-1)*CV_ScreenSize.zwzw;
  OUT.tc6=baseTC.xyxy+float4(-1,1,1,-1)*CV_ScreenSize.zwzw;
  OUT.tc2.xy=baseTC.xy;
  return OUT;
}