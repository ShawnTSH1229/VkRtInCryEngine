/*
BgAAAHBzXzZfMAAAFwAAAEhEUlNhbXBsZUx1bUl0ZXJhdGl2ZVBTAAICEAAAAEBAEAAAAIBAARAAAAAAQMzMzAAAAAAAAAAA
*/

cbuffer PER_BATCH:register(b0, space1)
{
  float4 SampleOffsets[16]:register(c0);
};
SamplerState HDRLum_LClampSampler:register(s1, space0);
Texture2D<float4>HDRLum_Targ:register(t0, space0);
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
float2 HDRSampleLumIterativePS(vtxOut IN):SV_Target
{
  const int nIter=4;
  const half nIterI=0.25f;
  half2 vResampleSum=0;
  for(int i=0;
  i<nIter;
  i++)vResampleSum+=GetTexture2D(HDRLum_Targ,HDRLum_LClampSampler,IN.baseTC.xy+SampleOffsets[i].xy).rg;
  vResampleSum*=nIterI;
  vResampleSum=exp(vResampleSum);
  return vResampleSum;
}