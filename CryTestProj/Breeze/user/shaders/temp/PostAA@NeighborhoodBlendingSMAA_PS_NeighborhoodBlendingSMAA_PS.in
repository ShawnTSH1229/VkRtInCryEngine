/*
BgAAAHBzXzZfMAAAGwAAAE5laWdoYm9yaG9vZEJsZW5kaW5nU01BQV9QUwABBBAAAABAQBAAAABAQRAAAACAQBAAAACAQczMAAAAAAAAAAA=
*/

Texture2D<float4>NbrBlndSMAA_Trg:register(t1, space0);
Texture2D<float4>NbrBlndSMAA_Wgt:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
struct vtxOut
{
  float4 WPos:SV_POSITION;
  float4 baseTC:TEXCOORD0;
};
cbuffer CBPostAA:register(b0)
{
  struct TemporalAAConstants
  {
    float4x4 matReprojection;
    float4 params;
    float4 screenSize;
  }
  cbPostAA;
};
pixout NeighborhoodBlendingSMAA_PS(vtxOut IN)
{
  pixout OUT=(pixout)0;
  const int3 vPixCoord=int3(IN.WPos.xy,0);
  float4 topLeft=NbrBlndSMAA_Wgt.Load(vPixCoord);
  float bottom=NbrBlndSMAA_Wgt.Load(vPixCoord,int2(0,1)).g;
  float right=NbrBlndSMAA_Wgt.Load(vPixCoord,int2(1,0)).a;
  float4 a=float4(topLeft.r,bottom,topLeft.b,right);
  [branch]if(dot(a,1.0)<1e-5)
  {
    OUT.Color=NbrBlndSMAA_Trg.Load(vPixCoord);
    return OUT;
  }
  else
  {
    float2 offset;
    offset.x=a.a>a.b?a.a:-a.b;
    offset.y=a.g>a.r?a.g:-a.r;
    if(abs(offset.x)>abs(offset.y))offset.y=0.0;
    else offset.x=0.0;
    float4 C=NbrBlndSMAA_Trg.Load(vPixCoord);
    float4 Cop=NbrBlndSMAA_Trg.Load(vPixCoord+int3(sign(offset),0));
    C.rgb=select((C.rgb<=0.0404499993F),C.rgb/12.9200001F,pow((C.rgb+float3(0.0549999997F,0.0549999997F,0.0549999997F))/1.05499995F,2.4000001F));
    Cop.rgb=select((Cop.rgb<=0.0404499993F),Cop.rgb/12.9200001F,pow((Cop.rgb+float3(0.0549999997F,0.0549999997F,0.0549999997F))/1.05499995F,2.4000001F));
    float s=abs(offset.x)>abs(offset.y)?abs(offset.x):abs(offset.y);
    OUT.Color=lerp(C,Cop,s);
    OUT.Color.rgb=select((OUT.Color.rgb<0.0031308),12.9200001F*OUT.Color.rgb,1.05499995F*pow(OUT.Color.rgb,1.F/2.4000001F)-half3(0.0549999997F,0.0549999997F,0.0549999997F));
    return OUT;
  }
  return OUT;
}