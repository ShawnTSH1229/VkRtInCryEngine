/*
BgAAAHBzXzZfMAAAGQAAAENvbW1vbl9DdXN0b21SZW5kZXJQYXNzUFMAAAAEARUAAAAAQAYBAAAAAEIBAAAAAEMXAAAAAEQBAAAAQE4EAAAAQFAQAAAAQHIPHwAAAABBHwAAAEBAHwAAAEBBHwAAAEBCHwAAAEBDHwAAAEBEHwAAAEBFHwAAAEBGHwAAAEBHHwAAAEBIHwAAAEBJHwAAAEBKHwAAAEBLHwAAAEBMHwAAAEBNHR8AAAAARR8AAAAARh8AAABAWQEAAABAWgEAAABAWxAAAABAXBAAAABAXRAAAABAXhAAAABAYBAAAABAYR8AAABAYx8AAABAZB8AAABAZR8AAACAQB8AAACAQR8AAACAQh8AAACAQx8AAACARB8AAACARR8AAACARh8AAACARx8AAACASB8AAACASR8AAACASh8AAACASxAAAADAQhAAAADAQxAAAADARBAAAADARcwAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space0)
{
  float4 vfHeightDensityRampParams;
  float4 vfScatteringParams;
  float4 vfGlobalEnvProbeParams0;
  float4 vfScatteringBlendParams;
  float4 vfScatteringColor;
  float4 vfDistributionParams;
  float4 vfSamplingParams;
  float3 vfColGradDelta;
  float4 irreg_kernel_2d[16/2];
  float4 vfRampParams;
  float4 vfColGradRadial;
  float4 vfGlobalEnvProbeParams1;
  float4 PS_NearFarClipDist;
  float4 vfColGradParams;
  float4 vfHeightDensityParams;
  //VisionMtlParams;
  float4 PS_ScreenSize;
  float3 vfColGradBase;
  float4 vfDistanceParams;
  float4 vfParams;
  float4 vfScatteringSecondaryColor;
  float4 vfSunDir;
};
cbuffer PER_MATERIAL:register(b0, space2)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3:packoffset(c38);
  float __0EmittanceMapGamma__1__2__3:packoffset(c42);
  float2 __0__1SSSIndex__2__3:packoffset(c48);
};
SamplerState ssMaterialTrilinear:register(s15, space3);
SamplerState ssPointClamp:register(s22, space3);
SamplerState ssMaterialAnisoHigh:register(s13, space3);
Texture2D sceneNormalsTex;
Texture2D normalsTex:register(t2, space2);
Texture2D sceneLinearDepthTex;
Texture2D diffuseTex:register(t1, space2);
Texture2D perlinNoiseTex:register(t2, space3);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b1, space3)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b0, space3)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b0, space3)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2DProj(Texture2D tex,SamplerState samplerState,float4 uv)
{
  return tex.Sample(samplerState,uv.xy*rcp(uv.w));
}
half2 GetTexture2DProj(Texture2D<float2>tex,SamplerState samplerState,float4 uv)
{
  return tex.Sample(samplerState,uv.xy*rcp(uv.w));
}
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
half2 GetXYNormalMap(Texture2D bumpTex,float2 bumpTC)
{
  return GetTexture2D(bumpTex,ssMaterialAnisoHigh,bumpTC).yx;
}
half2 GetXYNormalMap(Texture2D bumpTex,SamplerState samplerState,float2 bumpTC)
{
  return GetTexture2D(bumpTex,samplerState,bumpTC).yx;
}
half3 GetNormalMap(Texture2D bumpTex,float2 bumpTC)
{
  half3 bumpNormal;
  bumpNormal.xy=GetXYNormalMap(bumpTex,bumpTC.xy);
  bumpNormal.z=sqrt(saturate(1.h+dot(bumpNormal.xy,-bumpNormal.xy)));
  return bumpNormal;
}
half3 GetNormalMap(Texture2D bumpTex,SamplerState samplerState,float2 bumpTC)
{
  half3 bumpNormal;
  bumpNormal.xy=GetXYNormalMap(bumpTex,samplerState,bumpTC.xy);
  bumpNormal.z=sqrt(saturate(1.h+dot(bumpNormal.xy,-bumpNormal.xy)));
  return bumpNormal;
}
half GetAlphaTex(Texture2D tex,float2 texTC)
{
  return GetTexture2D(tex,ssMaterialAnisoHigh,texTC.xy).a;
}
half4 GetSceneTexProj(Texture2D tex,float4 texTC)
{
  return GetTexture2DProj(tex,ssPointClamp,texTC.xyzw);
}
float GetLinearDepth(float fDevDepth,bool bScaled=false)
{
  return fDevDepth*(bScaled?PS_NearFarClipDist.y:1.0f);
}
float GetLinearDepth(Texture2D depthTexture,int2 vPixCoord,bool bScaled=false)
{
  float fDepth=depthTexture.Load(int3(vPixCoord,0)).x;
  return GetLinearDepth(fDepth,bScaled);
}
float GetLinearDepth(Texture2D depthTexture,float2 ScreenTC,bool bScaled=false)
{
  int2 vPixCoord=int2(ScreenTC*PS_ScreenSize.xy);
  return GetLinearDepth(depthTexture,vPixCoord,bScaled);
}
float GetLinearDepthScaledProj(Texture2D sceneLinearDepthTex,float4 ProjTC)
{
  return GetLinearDepth(sceneLinearDepthTex,ProjTC.xy/ProjTC.w,true);
}
half3 DecodeGBufferNormal(half4 bufferA)
{
  return normalize(bufferA.xyz*2-1);
}
static const float LTC_LUT_SIZE=64.0f;
static const float LTC_LUT_SCALE=(LTC_LUT_SIZE-1.0f)/LTC_LUT_SIZE;
static const float LTC_LUT_BIAS=0.5f/LTC_LUT_SIZE;
cbuffer CBPerInstance:register(b0, space0)
{};
cbuffer CBPerDraw:register(b0, space0)
{
  float3x4 CD_WorldMatrix;
  float3x4 CD_PrevWorldMatrix;
  float4 CD_CustomData;
  float4 CD_CustomData1;
  float4 CD_CustomData2;
  float4 CD_LightMapScaleAndOffset;
};
cbuffer CBPerPassForward:register(b0, space3)
{
  struct
  {
    float4 vfParams;
    float4 vfRampParams;
    float4 vfSunDir;
    float3 vfColGradBase;
    float padding0;
    float3 vfColGradDelta;
    float padding1;
    float4 vfColGradParams;
    float4 vfColGradRadial;
    float4 vfShadowDarkening;
    float4 vfShadowDarkeningSunAmb;
  }
  cbFog;
  struct
  {
    float4 vfSamplingParams;
    float4 vfDistributionParams;
    float4 vfScatteringParams;
    float4 vfScatteringBlendParams;
    float4 vfScatteringColor;
    float4 vfScatteringSecondaryColor;
    float4 vfHeightDensityParams;
    float4 vfHeightDensityRampParams;
    float4 vfDistanceParams;
    float4 vfGlobalEnvProbeParams0;
    float4 vfGlobalEnvProbeParams1;
  }
  cbVoxelFog;
  struct
  {
    float4x4 TexGen0;
    float4x4 TexGen1;
    float4x4 TexGen2;
    float4x4 TexGen3;
    float4 vInvShadowMapSize;
    float4 fDepthTestBias;
    float4 fOneDivFarDist;
    float4 fKernelRadius;
    float4 CloudShadowParams;
    float4 CloudShadowAnimParams;
    float4 irreg_kernel_2d[8];
  }
  cbShadowSampling;
  struct
  {
    float4 CloudShadingColorSun;
    float4 CloudShadingColorSky;
  }
  cbClouds;
  struct
  {
    float4 IntegrationMode;
  }
  cbSVOGI;
};
struct vert2fragCustomRender
{
  float4 HPosition:SV_POSITION;
  float4 baseTC:TEXCOORD0;
  float4 screenProj:TEXCOORD1_centroid;
  float4 cVision:TEXCOORD2;
  float4 vView:TEXCOORD3;
};
half4 SilhouetteVision(vert2fragCustomRender IN)
{
  half fMask=1.0f;
  float fDepth=GetLinearDepthScaledProj(sceneLinearDepthTex,IN.screenProj);
  fMask=clamp((fDepth-1.5f)*0.333f,0,1);
  return half4(fMask.xxx*IN.cVision.xyz,IN.baseTC.w);
}
half4 SilhouetteVisionOptimised(vert2fragCustomRender IN)
{
  half fMask=1.0f;
  half3 finalColor=fMask.xxx*IN.cVision.xyz;
  return half4(finalColor.rgb,(IN.cVision.w<=0)?IN.cVision.w:(dot(finalColor,0.333f)>0.0f));
}
half4 SilhouetteGeometryHighlights(vert2fragCustomRender IN)
{
  half3 vNormal=DecodeGBufferNormal(GetSceneTexProj(sceneNormalsTex,IN.screenProj.xyzw));
  half3 vView=normalize(-IN.vView.xyz);
  half fEdotN=saturate(dot(vView.xyz,vNormal));
  fEdotN=(1.0-fEdotN);
  half fInterlace=abs(frac((IN.screenProj.y/IN.screenProj.w)*PS_ScreenSize.y*0.35)*2-1)*0.5+0.5;
  half fNoise=GetTexture2D(perlinNoiseTex,ssMaterialTrilinear,IN.baseTC.xy).x;
  half fAnimNoise=abs(frac(fNoise+IN.cVision.w)-0.5);
  return half4(fInterlace*IN.cVision.xyz*fEdotN*fAnimNoise,1);
}
half4 ThermalVision(vert2fragCustomRender IN)
{
  return 1.0h;
}
pixout Common_CustomRenderPassPS(vert2fragCustomRender IN)
{
  pixout OUT=(pixout)0;
  OUT.Color=SilhouetteVisionOptimised(IN);
  return OUT;
}