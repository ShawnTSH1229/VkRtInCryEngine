/*
BgAAAHZzXzZfMAAADQAAAFRyYW5zZm9ybWVkVlMAAAAEBxAAAABAQBAAAABAQRAAAABAQhAAAABARxAAAABASBAAAABASRAAAACAQAERAAAAAEYBAQAAAABAARAAAAAAQMzMzAAAAAAAAAAA
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float Time;
};
cbuffer CBPerViewGlobal:register(b0, space1)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
float2 GetScaledScreenTC(float2 TC)
{
  return TC*CV_HPosScale;
}
struct app2vertToneMap
{
  float4 Position:POSITION;
  float2 baseTC:TEXCOORD0;
  float3 CamVec:TEXCOORD1;
};
struct vert2frag
{
  float4 HPosition:SV_POSITION;
  float4 baseTC:TEXCOORD0;
  float3 CamVec:TEXCOORD1;
  float4 baseTCScaled:TEXCOORD2;
};
vert2frag TransformedVS(app2vertToneMap IN)
{
  vert2frag OUT=(vert2frag)0;
  float4 vPos=IN.Position;
  vPos.y=1-vPos.y;
  OUT.HPosition=float4(vPos.xy*2-1,vPos.z,1.0);
  float2 baseTC=IN.baseTC.xy;
  half2 offset=half2(frac(Time.x*27),frac(Time.x*19));
  OUT.baseTC.xy=baseTC;
  OUT.baseTCScaled.xy=GetScaledScreenTC(baseTC);
  OUT.baseTCScaled.wz=((OUT.baseTCScaled.xy+offset)/64.0)*CV_ScreenSize.xy;
  OUT.CamVec.xyz=IN.CamVec;
  return OUT;
}