/*
BgAAAHBzXzZfMAAAFQAAAFNlbGVjdGlvblNpbGhvdWV0dGVQUwAAAAMCEAAAAEBAEAAAAIBAAQEAAAAAQAEQAAAAAEAAAAAAAAAAAA==
*/

cbuffer PER_BATCH:register(b0, space2)
{
  float4 selectionColor;
  float ghostAlpha;
  float4 highlightColor;
};
SamplerState SelSil_Sampler:register(s1, space0);
Texture2D<float4>SelSil_Source:register(t0, space0);
struct pixout
{
  half4 Color:SV_Target0;
};
cbuffer CBPerViewGlobal:register(b6)
{
  float4x4 CV_ViewProjZeroMatr;
  float4 CV_AnimGenParams;
  float4x4 CV_ViewProjMatr;
  float4x4 CV_ViewProjNearestMatr;
  float4x4 CV_InvViewProj;
  float4x4 CV_PrevViewProjMatr;
  float4x4 CV_PrevViewProjNearestMatr;
  float3x4 CV_ScreenToWorldBasis;
  float4 CV_TessInfo;
  float4 CV_WorldViewPosition;
  float4 CV_CameraRightVector;
  float4 CV_CameraFrontVector;
  float4 CV_CameraUpVector;
  float4 CV_ScreenSize;
  float4 CV_HPosScale;
  float4 CV_ProjRatio;
  float4 CV_NearestScaled;
  float4 CV_NearFarClipDist;
  float4 CV_SunLightDir;
  float4 CV_SunColor;
  float4 CV_SkyColor;
  float4 CV_FogColor;
  float4 CV_TerrainInfo;
  float4 CV_DecalZFightingRemedy;
  float4x4 CV_FrustumPlaneEquation;
  float4 CV_WindGridOffset;
  float4x4 CV_ViewMatr;
  float4x4 CV_InvViewMatr;
  float4x4 CV_ProjMatr;
  float4x4 CV_ProjMatrUnjittered;
};
cbuffer CBPerPassShadowGen:register(b5)
{
  float4 CP_ShadowGen_LightPos;
  float4 CP_ShadowGen_ViewPos;
  float4 CP_ShadowGen_DepthTestBias;
  float4 CP_ShadowGen_FrustumInfo;
  float4 CP_ShadowGen_VegetationAlphaClamp;
};
cbuffer CBPerPassCustom:register(b5)
{
  float4 CP_Custom_ViewMode;
};
cbuffer CB_SkinQuat_Cur:register(b2)
{
  float2x4 _g_SkinQuat_Cur[768];
};
cbuffer CB_SkinQuat_Prev:register(b3)
{
  float2x4 _g_SkinQuat_Prev[768];
};
half4 GetTexture2D(Texture2D tex,SamplerState samplerState,float2 uv)
{
  return tex.Sample(samplerState,uv);
}
cbuffer CBWaterRipples:register(b0, space2)
{
  struct
  {
    float4 params;
  }
  cbWaterRipples;
};
struct vtxOutSilhouette
{
  float4 HPosition:SV_POSITION;
  float4 baseTC0:TEXCOORD0;
  float4 baseTC1:TEXCOORD1;
  float4 baseTC2:TEXCOORD2;
};
pixout SelectionSilhouettePS(vtxOutSilhouette IN)
{
  const float fHiddenAlpha=ghostAlpha;
  pixout OUT=(pixout)0;
  uint pixelInfo=asuint(GetTexture2D(SelSil_Source,SelSil_Sampler,IN.baseTC0).x);
  uint pixelID=pixelInfo>>8;
  bool bIsHighlighted=(pixelInfo&(1<<1))!=0;
  bool bIsSelected=(pixelInfo&(1))!=0;
  bool bIsHidden=(pixelInfo&(1<<2))!=0;
  uint4 edgesInfo=uint4(asuint(GetTexture2D(SelSil_Source,SelSil_Sampler,IN.baseTC1.xy).x),asuint(GetTexture2D(SelSil_Source,SelSil_Sampler,IN.baseTC1.zw).x),asuint(GetTexture2D(SelSil_Source,SelSil_Sampler,IN.baseTC2.xy).x),asuint(GetTexture2D(SelSil_Source,SelSil_Sampler,IN.baseTC2.zw).x));
  uint4 edgeIDs=(edgesInfo>>8);
  bool4 vbDiffMask=(edgeIDs!=pixelID);
  bool bIsEdge=any(vbDiffMask);
  if(bIsEdge)
  {
    bool4 vbIsHigherID=(edgeIDs>pixelID);
    bool4 vbIsHighlightedEdge=((edgesInfo&(1<<1))!=0);
    bool4 vbIsSelectedEdge=((edgesInfo&(1))!=0);
    bool4 vbIsHiddenEdge=((edgesInfo&(1<<2))!=0);
    if(any(and(vbIsHighlightedEdge,vbDiffMask)))
    {
      if(bIsHighlighted)
      {
        bool4 vbMask=and(vbIsHigherID,vbIsHighlightedEdge);
        if(any(vbMask))
        {
          OUT.Color=highlightColor;
          OUT.Color.a=(any(and(vbMask,!vbIsHiddenEdge))||!bIsHidden)?1.0:fHiddenAlpha;
        }
        else if(!bIsHidden)
        {
          OUT.Color=highlightColor;
        }
        }
      else
      {
        OUT.Color=highlightColor;
        OUT.Color.a=(any(and(vbIsHiddenEdge,vbIsHighlightedEdge)))?fHiddenAlpha:1.0;
      }
      }
    else if(and(any(and(vbIsSelectedEdge,vbDiffMask)),!bIsHighlighted))
    {
      if(bIsSelected)
      {
        bool4 vbMask=and(vbIsHigherID,vbIsSelectedEdge);
        if(any(vbMask))
        {
          OUT.Color=selectionColor;
          OUT.Color.a=(any(and(vbMask,!vbIsHiddenEdge))||!bIsHidden)?1.0:fHiddenAlpha;
        }
        else if(!bIsHidden)
        {
          OUT.Color=selectionColor;
        }
        }
      else
      {
        OUT.Color=selectionColor;
        OUT.Color.a=(any(and(vbIsHiddenEdge,vbIsSelectedEdge)))?fHiddenAlpha:1.0;
      }
      }
    else if(bIsSelected)
    {
      if(!bIsHidden)
      {
        OUT.Color=selectionColor;
      }
      }
    else if(bIsHighlighted)
    {
      if(!bIsHidden)
      {
        OUT.Color=highlightColor;
      }
      }
    }
  else if(bIsSelected)
  {
    if(!bIsHidden)
    {
      OUT.Color=selectionColor;
    }
    }
  else if(bIsHighlighted)
  {
    if(!bIsHidden)
    {
      OUT.Color=highlightColor;
    }
    }
  return OUT;
}